# Runs e2e tests against please in a specified repo
def please_repo_e2e_test(
        name: str,
        plz_command: str,
        repo: str,
        data: dict={},
        deps: list=[],
        tools: dict={},
        expected_failure: bool = False,
        expected_output: dict = {},
        expect_output_contains: dict = {},
        expect_output_doesnt_contain: dict = {},
        labels: list = [],
):
    plz_command = plz_command.replace("plz ", "$TOOLS_PLEASE ")
    if expected_failure:
        plz_command += "; [ ! $? -eq 0 ]"

    test_cmd = [
        "mv $DATA_BASE_CONFIG $DATA_REPO",
        "cd $DATA_REPO",
        plz_command,
    ]

    if expected_output:
        test_cmd += [f"$TOOLS_CONTENT_CHECKER '{o}' '{c}'" for o, c in expected_output.items()]

    if expect_output_contains:
        test_cmd += [f'_STR="$(cat {o})" _SUBSTR="{c}" && if [ "${_STR##*$_SUBSTR*}" ]; then echo "$_STR"; exit 1; fi' for o, c in expect_output_contains.items()]

    if expect_output_doesnt_contain:
        test_cmd += [f'_STR="$(cat {o})" _SUBSTR="{c}" && if [ -z "${_STR##*$_SUBSTR*}" ]; then echo "$_STR"; exit 1; fi' for o, c in expect_output_contains.items()]

    test_cmd = ' && '.join(test_cmd)

    data["REPO"] = [repo]
    data["BASE_CONFIG"] = ["//test/build_defs:base_config"]

    tools["PLEASE"] = ["//test:please"]
    tools["CONTENT_CHECKER"] = ["//test/build_defs:content_checker"]

    return gentest(
        name = name,
        test_cmd = test_cmd,
        test_tools = tools,
        data = data,
        deps = deps,
        env = {
            "PLZ_CONFIG_PROFILE": "e2e",
        },
        no_test_output = True,
        labels = labels + ["plz_e2e_test", "e2e"],
        sandbox = False,
    )
